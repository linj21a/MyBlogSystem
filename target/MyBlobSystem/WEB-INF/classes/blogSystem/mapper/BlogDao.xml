<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--BlogDao的映射文件，实现其方法 -->
<!--namespace应该写为全限定名字 或者使用配置文件配置生成-->
<mapper namespace="com.yuyefanhua.blogsystem.dao.BlogDao">
<!--    结果集-->
    <resultMap id="blog" type="Blog">
        <id property="id" column="id"/>
        <result property="title" column="title"/>
        <result property="content" column="content"/>
        <result property="firstPicture" column="first_picture"/>
        <result property="flag" column="flag"/>
        <result property="views" column="views"/>
        <result property="appreciation" column="appreciation"/>
        <result property="shareStatement" column="share_statement"/>
        <result property="commentabled" column="commentabled"/>
        <result property="published" column="published"/>
        <result property="recommend" column="recommend"/>
        <result property="createTime" column="create_time"/>
        <result property="updateTime" column="update_time"/>
        <result property="typeId" column="type_id"/>
        <result property="userId" column="user_id"/>
        <result property="tagIds" column="tag_ids"/>
        <result property="description" column="description"/>
<!--        表链接的关系 type 都是链接查询查到的-->
        <association property="type" javaType="Type">
<!--            typeid被关联到type类的id上-->
            <id property="id" column="typeid"/>
<!--            type类的name属性对于typename行字段-->
            <result property="name" column="typename"/>
            <!--            其他的可以为null -->
        </association>
<!--        表链接关系 都是链接查询查到的-->
        <association property="user" javaType="User">
            <id property="id" column="id"/>
            <result property="nickname" column="nickname"/>
            <result property="username" column="username"/>
            <result property="email" column="email"/>
            <result property="avatar" column="avatar"/>
        <!--其他的可以为null -->
        </association>
        <collection property="tags" ofType="Tag">
            <id property="id" column="tagid"/>
            <result property="name" column="tagname"/>
        </collection>
    </resultMap>
<!--    设计的方法-->
    <delete id="deleteBlog">
        delete from t_blog where id= #{id}
    </delete>
    <select id="getDetailedBlog" resultMap="blog">  /*博客详情*/
    select b.id, b.first_picture, b.flag, b.title, b.content, b.views,
           b.update_time,b.commentabled, b.share_statement, b.appreciation,
           u.nickname, u.avatar,
           tag.id tagid, tag.name tagname
    from t_blog b, t_user u, t_tag tag, t_tags tb
    where b.user_id = u.id and tb.blog_id = b.id and tb.tag_id = tag.id and  b.id = #{id}

    </select>
    <select id="getIndexBlog" resultMap="blog">
        select b.id,b.title,b.first_picture,b.views,b.update_time,b.description,
               t.name typename,t.id typeid,
               u.nickname,n.avatar
        from t_blog b,t_type t,t_user u
        where b.type_id=t.id and u.id=b.user_id order by b.update_time desc
    </select>
    <select id="getAllBlog" resultMap="blog">
        select b.id, b.title, b.update_time, b.recommend, b.type_id, b.published,
               t.id typeid, t.name typename
        from t_blog b, t_type t
        where b.type_id = t.id
    </select>
    <select id="getByTypeId" resultMap="blog">
        select b.id, b.title, b.first_picture, b.views, b.update_time, b.description,
               t.name typename, t.id typeid,
               u.nickname, u.avatar
        from t_blog b, t_type t, t_user u
        where b.type_id = t.id and u.id = b.user_id and b.type_id = #{typeId} order by b.update_time desc
    </select>
    <select id="getAllRecommendBlog" resultMap="blog">
        select id, title, recommend from t_blog order by update_time desc;
    </select>
<!--    后台展示博客 -->
    <select id="getBlog" resultMap="blog">
    select b.id, b.published, b.flag, b.title, b.content, b.type_id,
           b.tag_ids, b.first_picture, b.description, b.recommend,
           b.share_statement, b.appreciation, b.commentabled
    from t_blog b  where  b.id = #{id};
    </select>
<!--    获取 查阅人数总浏览量 -->
    <select id="getAllViews" resultType="Integer">
        select SUM(views) from t_blog
    </select>
<!--    更新浏览量-->
    <update id="updateViews" >
        update t_blog b set b.views=b.views+1 where b.id = #{id}
    </update>
<!--    搜索博客 模糊搜索 -->
    <select id="getSearchBlog" resultMap="blog">
        <bind name="pattern" value="'%' + query + '%'" />
        select b.id, b.title, b.first_picture, b.views, b.update_time, b.description,
        t.name typename,
        u.nickname, u.avatar
        from t_blog b, t_type t, t_user u
        where b.type_id = t.id and  u.id = b.user_id and (b.title like #{pattern} or b.content like  #{pattern})
        order by b.update_time desc
    </select>
<!-- 全局搜索博客 按照title主题关键字搜索
 同时使用了mybatis里面的多条件查询  允许某些条件为null
 -->
    <select id="searchAllBlog" parameterType="Blog" resultMap="blog">
        select b.id, b.title, b.update_time, b.recommend, b.published, b.type_id, t.id typeid, t.name typename
        from t_blog b left join t_type t on b.type_id=t.id
        <where>
            <if test="typeId != null">
                b.type_id = #{typeId}       /*根据博客类型查询*/
            </if>
            <if test="recommend !=null">
                and b.recommend = #{recommend}   /*根据博客推荐查询*/
            </if>
            <if test="title != null and title !='' ">
                and b.title like concat('%',#{title},'%')   /*根据博客title模糊查询*/
            </if>
        </where>
    </select>
<!--    更新博客内容 -->
    <update id="updateBlog" parameterType="Blog">
        update t_blog set published = #{published},flag = #{flag} ,
                          title = #{title}, content = #{content}, type_id = #{typeId}, tag_ids = #{tagIds},
                          first_picture = #{firstPicture} , description = #{description} , recommend = #{recommend} ,
                          share_statement = #{shareStatement}, appreciation = #{appreciation},
                          commentabled = #{commentabled} ,update_time = #{updateTime} where id = #{id};
    </update>
<!--   保存博客 useGeneratedKeys 使用自增主键获取主键策略值
        keyProperty；指定对应的主键属性，也就是mybatis获取到主键值以后，
        将这个值封装给javaBean的哪个属性
-->
    <insert id="saveBlog" parameterType="Blog" useGeneratedKeys="true" keyProperty="id">
        insert into t_blog (title, content, first_picture, flag,
                            views, appreciation, share_statement, commentabled,published,
                            recommend, create_time, update_time, type_id, tag_ids, user_id, description)
        values (#{title}, #{content}, #{firstPicture}, #{flag}, #{views}, #{appreciation},
                #{shareStatement}, #{commentabled}, #{published}, #{recommend}, #{createTime},
                #{updateTime}, #{typeId}, #{tagIds}, #{userId}, #{description});
    </insert>
    <insert id="saveBlogTag" parameterType="BlogTag">
        insert into t_tags (tag_id, blog_id) values (#{tagId},#{blogId});
    </insert>

    <select id="findGroupYear" resultType="String">
        select DATE_FORMAT(b.update_time, '%Y') from t_blog b order by b.update_time desc
    </select>

    <select id="findByYear" resultMap="blog">
        select b.title, b.update_time, b.id, b.flag
        from t_blog b
        where DATE_FORMAT(b.update_time, "%Y") = #{year}
    </select>
</mapper>